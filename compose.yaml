services:
  user_service:
    build: ./user_services
    ports:
      - "8000:8000"
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://user_service:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  event_service:
    build: ./event_services
    ports:
      - "8080:8080"
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - MONGO_URI=mongodb://mongodb:27017/event_services
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://event_service:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  booking_service:
    build: ./booking_services
    ports:
      - "5000:5000"
    depends_on:
      postgresql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://booking_service:5000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  notification_service:
    build: ./notification_services
    ports:
      - "5001:5000"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - MONGO_URI=mongodb://mongodb:27017/notification_service
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://notification_service:5000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    command: [ "sh", "-c", "python3 notification_api.py & python3 consumer.py" ]

  payment_service:
    build: ./payment_services
    ports:
      - "5002:5000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://payment_service:5000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: ./frontend
    ports:
      - "80:80"
    depends_on:
      user_service:
        condition: service_healthy
      event_service:
        condition: service_healthy
      booking_service:
        condition: service_healthy
      notification_service:
        condition: service_healthy
      payment_service:
        condition: service_started
      # - user_service
      # - event_service
      # - booking_service
      # - notification_service
      # - payment_service

  postgresql:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U devops && psql -U devops -d user_service -c 'SELECT 1;'" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet mongodb:27017
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management #rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_ERLANG_COOKIE=cookie
    # healthcheck:
    #   test: [ "CMD-SHELL", "rabbitmq-diagnostics check_running" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    # healthcheck:
    #   test: [ "CMD", "rabbitmqctl", "status" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always
volumes:
  pgdata:
  mongodata:
  rabbitmq_data:

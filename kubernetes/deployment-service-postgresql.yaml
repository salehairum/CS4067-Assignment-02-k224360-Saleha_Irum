apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: online-event-booking-saleha-irum
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql-deployment
  namespace: online-event-booking-saleha-irum
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
        - name: postgresql
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: event-booking-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: event-booking-secrets
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d/
              name: postgres-init
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
      volumes:
        - name: postgres-init
          configMap:
            name: postgres-init
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: online-event-booking-saleha-irum
spec:
  selector:
    app: postgresql  # This should match the labels in your Deployment
  ports:
    - protocol: TCP
      port: 5433  # Port for communication
      targetPort: 5432  # Matches containerPort in Deployment
  type: ClusterIP  # Keeps it accessible within the cluster